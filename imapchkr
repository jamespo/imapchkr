#!/usr/bin/env python3

# imapchkr - checks for new messages in IMAP server
# (c) James Powell - jamespo [at] gmail [dot] com 2014-2020
# Create ~/.config/.imapchkr.conf with 1 or more sections as below:
#
# [serveralias]
# user=james
# password=2347923rbkaa
# server=yourimapserver.com
# newmail_cmd=/usr/bin/ogg123 /usr/share/sounds/gnome/default/alerts/sonar.ogg
# folders=INBOX,Work

from email.header import make_header, decode_header
import os
import sys
import imaplib
import email
from email.utils import parseaddr
from optparse import OptionParser
from collections import namedtuple
import configparser
import queue
import shlex
import socket
import subprocess
import threading

DEBUG=False

# tuple of shell colour codes
colmap = namedtuple('ColMap', ['norm', 'white', 'blue', 'yellow', 'green'])
colm = colmap('\033[0m', '\033[37;1m', '\033[36;1m', '\033[33;1m', '\033[32;1m')


def get_accounts(config, cmd_folders):
    '''return dict of account name -> folders to check from config/cmd line'''
    accounts = set(config.sections())
    accounts.discard('imapchkr')  # global options - not account
    acct2folder = {}
    for account in tuple(accounts):
        # if cmdline folders passed & account not in list skip it
        if len(cmd_folders) and account not in cmd_folders:
            continue
        # if cmdline folders exists, override conf file
        folders = cmd_folders.get(
            account,
            config.get(account, 'folders', fallback=('INBOX',)))
        if folders != ('INBOX',):
            folders = tuple(folders.split(','))
        acct2folder[account] = folders
    return acct2folder


def pidfile(pidpath, mode='create'):
    '''wipe existing processes, create/wipe pidfile'''
    if pidpath is None:
        pidpath = '/tmp/.imapchkr.pid'  # TODO move to home
    if mode != 'create':
        os.remove(pidpath)
        return
    try:
        with open(pidpath) as mypidfile:
            pid = int(mypidfile.read())
        os.kill(pid, 15)
    except (FileNotFoundError, ProcessLookupError, ValueError):
        pass  # doesn't exist or pid invalid
    with open(pidpath, 'w') as mypidfile:
        mypidfile.write(str(os.getpid()))


def getopts():
    '''returns OptionParser.options for CL switches'''
    parser = OptionParser()
    parser.add_option("-c", help="config file", dest="conffile",
                      default="~/.config/.imapchkr.conf")
    parser.add_option("-b", help="b/w output", action="store_false",
                      dest="color", default=True)
    parser.add_option("-s", help="short output", action="store_true",
                      dest="short", default=False)
    parser.add_option("-l", help="list mail summary", action="store_true",
                      dest="listmail", default=False)
    parser.add_option("-f", help="folders to check (acct:f1,f2;acct2:f3,f4)",
                      dest="folders")
    parser.add_option("-p", help="pid path", dest="pidpath",
                      default="/tmp/.imapchkr.pid")
    options, _ = parser.parse_args()
    options.folders = parse_folder_opts(options.folders)
    return options


def parse_folder_opts(opt_folders):
    '''parse -f folders flag string'''
    if opt_folders is None:
        return {}
    manual_acct2fldr = {}
    for sect in opt_folders.split(';'):
        acct, folder_str = sect.split(':')
        manual_acct2fldr[acct] = folder_str  # split in get_accounts()
    return manual_acct2fldr


def readconf(conffile):
    '''returns ConfigParser object with account details'''
    config = configparser.ConfigParser(interpolation=None)
    config.read(os.path.expanduser(conffile))
    return config


class MailInfo():
    '''store mailcheck results'''
    def __init__(self, account, unread=None, total=None,
                 folder=None, msgs=None):
        self.account = account
        self.unread = unread
        self.total = total
        self.folder = folder
        if msgs is not None:
            self.msgs = msgs
        else:
            self.msgs = []


class IMAPChkr():
    '''defines an individual IMAP account & checks it'''
    def __init__(self, q, account, user, pw, server, folders,
                 get_summaries=False):
        self.q = q
        self.account = account
        self.user = user
        self.pw = pw
        self.server = server
        self.get_summaries = get_summaries
        self.mailconn = None
        self.folders = folders
        if DEBUG:
            print('%s: initialized' % self.account)

    def connect(self):
        '''connect to the mailserver'''
        self.mailconn = imaplib.IMAP4_SSL(self.server)
        if 'AUTH=CRAM-MD5' in self.mailconn.capabilities:
            # use cram_md5 for auth
            if DEBUG:
                print('Using md5')
            status, comment = self.mailconn.login_cram_md5(self.user, self.pw)
        else:
            status, comment = self.mailconn.login(self.user, self.pw)
        assert status == 'OK'
        if DEBUG:
            print('logged in')
        self.mailconn.list()  # TODO: needed?

    def checknew(self):
        '''puts namedtuple Mailinfo with summary of mailbox contents on q'''
        try:
            self.connect()
        except:  # TODO: make exception checking more specific
            if DEBUG:
                print('connect failed')
            pass  # handled below
        # loop through folders & get count
        for folder in self.folders:
            try:
                minfo = self.count_mails(folder)
            except:
                # empty result
                minfo = MailInfo(self.account, folder=folder)
            finally:
                self.q.put(minfo)
        # close connection
        if self.mailconn.state != 'NONAUTH':
            self.mailconn.close()
        try:
            self.mailconn.logout()
        except OSError:
            print("%s timed out" % self.account, file=sys.stderr)

    def count_mails(self, folder):
        '''count the mails & return MailInfo tuple'''
        allretcode, allmessages_str = self.mailconn.select(folder, readonly=True)
        unretcode, unmessages = self.mailconn.search(None, '(UNSEEN)')
        if (unretcode, allretcode) == ('OK', 'OK'):
            allmessages_num = int(allmessages_str[0])
            unread = unmessages[0].decode(encoding="utf-8", errors='replace')
            if unread == '':
                # no new mails found
                minfo = MailInfo(self.account, 0, allmessages_num, folder, [])
            else:
                # new mails found
                unmessages_arr = unread.split(' ')
                if self.get_summaries:
                    # will need to be enabled for run_cmd to populate details!
                    msgs = self.get_mails(unmessages_arr)
                else:
                    msgs = []
                minfo = MailInfo(self.account, len(unmessages_arr),
                                 allmessages_num, folder,  msgs)
        else:
            raise imaplib.IMAP4.error()
        return minfo

    def get_mails(self, msg_ids):
        '''return mail summaries for given msg_ids'''
        msgs = []
        EmailSummary = namedtuple('EmailSummary', ['num', 'fromad', 'subject',
                                                   'date', 'isnew'])
        try:
            for num in msg_ids:
                typ, data = self.mailconn.fetch(num, '(RFC822.HEADER)')
                msg = data[0][1]
                msg = msg.decode(encoding='utf-8', errors='replace')
                # msg = msg.decode('cp1252')  # windows codec seems to work
                msg = email.message_from_string(msg)
                email_summ = EmailSummary(int(num), self.clean_address(msg['From']),
                                          self.clean_subject(msg['Subject']),
                                          None, None)
                msgs.append(email_summ)
        except Exception as ex:
            # if any errors just don't list mails
            print("Error listing mails: %s" % ex, file=sys.stderr)
            msgs = []
        return msgs

    @staticmethod
    def clean_address(email_addr):
        '''return clean from address'''
        clean_addr = parseaddr(email_addr)
        return IMAPChkr.unicode_to_str(clean_addr[0] or clean_addr[1])

    @staticmethod
    def clean_subject(subj):
        '''decode subject if in unicode format'''
        subj = IMAPChkr.unicode_to_str(subj)
        # remove newlines
        subj = subj.replace('\r', '')
        subj = subj.replace('\n', '')
        return subj

    @staticmethod
    def unicode_to_str(header):
        '''convert unicode header to plain str if required'''
        return str(make_header(decode_header(header)))


class MailResults():
    '''results for all IMAPChkr instances'''
    def __init__(self, cmd_options, mailinfos, acct_cols):
        self.cmd_options = cmd_options
        self.mailinfos = mailinfos
        self.acct_cols = acct_cols

    def format_msgcnt(self):
        '''returns string with overview (read/unread) for all accounts'''
        output = ''
        for minfo in self.mailinfos:
            account_name = minfo.account
            if minfo.folder != 'INBOX':
                # append folder name to label if not INBOX
                account_name += '.%s' % minfo.folder
            if self.cmd_options.color:
                account_name = '%s%s%s' % (self.acct_cols[minfo.account],
                                           account_name, colm.norm)
            if self.cmd_options.short:
                output += "%s:%s " % (minfo.account[0], minfo.unread)
            elif None in (minfo.unread, minfo.total):
                output += '[%s: unknown] ' % account_name
            elif self.cmd_options.color and minfo.unread > 0:
                output += '[%s: %s%d/%d%s] ' % (account_name, colm.white,
                                                minfo.unread, minfo.total, colm.norm)
            else:
                output += '[%s: %d/%d] ' % (account_name, minfo.unread, minfo.total)
        output = output.rstrip()
        return output

    def format_mailsummaries(self):
        '''takes list of MailInfo tuple & returns formatted string of mails'''
        non_inbox_folders = set(mailinfo.folder for mailinfo in self.mailinfos)
        non_inbox_folders.discard("INBOX")
        if len(non_inbox_folders):
            # non-INBOX folders being checked - include folder name in summary display
            ac_max_len = max((len(mailinfo.account)+len(mailinfo.folder)+1
                              for mailinfo in self.mailinfos))
        else:
            ac_max_len = max(len(mailinfo.account) for mailinfo in self.mailinfos)
        summaries = []
        for mailinfo in self.mailinfos:
            account_name = mailinfo.account
            if self.cmd_options.color:
                account_name = '%s%s%s' % (self.acct_cols[account_name],
                                           account_name, colm.norm)
            # spaces to pad account name with (colouring breaks padding)
            acct_spc = ' ' * (ac_max_len - len(mailinfo.account))
            s_fmt = '[{acct_spc}{acct}] [{summ.num:04d}] {summ.fromad:25} {summ.subject:40}'
            for summ in mailinfo.msgs:
                summaries.append(s_fmt.format(acct=account_name,
                                              ac_max_len=ac_max_len,
                                              summ=summ, acct_spc=acct_spc))
        return "\n".join(summaries)


def run_cmd(cmd, msg_results):
    '''run external command'''
    args = shlex.split(cmd)
    # last arg can optionally be format string
    if '{' in args[-1]:
        # replace final arg with args expanded
        args[-1] = populate_arg(args[-1], msg_results)
    if DEBUG:
        subprocess.run(args)
    else:
        subprocess.run(args, capture_output=True)


def populate_arg(arg, msg_results):
    '''substitute variables into str format'''
    fromdetails = ','.join(set(msg.fromad for msg in msg_results.msgs))
    if fromdetails == '':
        fromdetails = 'use -l flag!'
    args = {'account': msg_results.account,
            'unread': msg_results.unread,
            'fromdetails': fromdetails}
    try:
        return str.format(arg, **args)
    except KeyError:
        return ''


def get_mailcounts(q, cmd_options, config, acct2folder):
    '''start thread to check each account & put results on q'''
    for account in acct2folder.keys():
        user, pw, server = (config.get(account, 'user'),
                            config.get(account, 'password'),
                            config.get(account, 'server'))
        folders = acct2folder[account]
        acct = IMAPChkr(q, account, user, pw, server, folders, cmd_options.listmail)
        t = threading.Thread(target=acct.checknew)
        t.start()


def display_mailcounts(q, cmd_options, config, acct2folder):
    '''pull results off q, format & display'''
    mailinfos = []
    acct_cols = {}  # dict of account name : colour
    found_unread = False
    # loop round accounts & folders (just to get # of q entries right)
    for acct_num, account in enumerate(acct2folder.keys()):
        for folder in acct2folder[account]:
            msg_results = q.get()  # NOT NECESSARILY the folder/acct in the loop!
            if not found_unread:
                found_unread = msg_results.unread > 0
            mailinfos.append(msg_results)
            if config.has_option(msg_results.account, 'newmail_cmd') and found_unread:
                # execute new mail command if configured
                run_cmd(config.get(msg_results.account, 'newmail_cmd'), msg_results)
        # store colour for account
        acct_cols[account] = colm[(acct_num % (len(colm)-2))+2]
    mt = MailResults(cmd_options, mailinfos, acct_cols)
    print(mt.format_msgcnt())
    # display email summaries if chosen and any new mails
    if cmd_options.listmail and any((msg.unread > 0 for msg in mailinfos)):
        print(mt.format_mailsummaries())


def main():
    '''load options, start check threads and display results'''
    cmd_options = getopts()
    pidfile(cmd_options.pidpath)
    config = readconf(cmd_options.conffile)
    acct2folder = get_accounts(config, cmd_options.folders)
    q = queue.Queue(len(acct2folder))  # total # of folders
    # set IMAP server connections timeout
    socket.setdefaulttimeout(int(os.getenv('IMAPCTM', 15)))
    get_mailcounts(q, cmd_options, config, acct2folder)
    display_mailcounts(q, cmd_options, config, acct2folder)
    pidfile(cmd_options.pidpath, 'remove')


if __name__ == '__main__':
    if os.getenv('ICDEBUG'):
        DEBUG = True
    main()
